// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  id              String      @id @default(uuid())
  clerkUserId     String      @unique
  email           String      @unique
  name            String?
  imageUrl        String?
  industry        String?
  industryInsight  IndustryInsight? @relation(fields:[industry], references:[industry])
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  bio             String?
  experience      Int?
  skills          String[]

  assessments     Assessment[]
  resume          Resume?
  coverLetter     CoverLetter[]
  interviewQuestions InterviewQuestion[]
  chatMessages    ChatMessage[]
  interviewInsight InterviewInsight[]
  learningRoadmap  LearningRoadmap[]
}



model Assessment{
  id           String         @id @default(uuid())
  userId       String            
  user         User           @relation(fields:[userId], references:[id])
  quizScore    Float
  questions    Json[]
  category     String
  improvementTip  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([userId])
}

model InterviewQuestion {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  qaPairs   Json     // stores an array of { question, answer } objects
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model InterviewInsight {
  id             String      @id @default(uuid())
  userId         String
  user           User        @relation(fields: [userId], references: [id])

  company        String
  role           String
  rounds         Json        // Array of rounds with 5 questions each
  generalTips    String?     // Optional string or could be changed to Json if you want multiple tips

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([userId])
}


model Resume{
  id           String         @id @default(uuid())
  userId       String         @unique
  user         User           @relation(fields:[userId], references:[id])
  content      String         @db.Text
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model CoverLetter{
  id                 String         @id @default(uuid())
  userId             String            
  user               User           @relation(fields:[userId], references:[id])
  content            String 
  jobDescription     String?
  companyName        String
  jobTitle           String
  status             String         @default("draft")
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  @@index([userId])
}

model IndustryInsight{
  id                String         @id @default(uuid())
  industry          String         @unique
  users             User[]
  salaryRanges      Json[]
  growthRate        Float
  demandLevel       String
  topSkills         String[]
  marketOutlook     String
  keyTrends         String[]
  recommendedSkills String[]
  lastUpdated       DateTime       @default(now())
  nextUpdate        DateTime

  @@index([industry])
}

model LearningRoadmap {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  skill     String
  language  String
  level     String

  roadmap   Json     
  createdAt DateTime @default(now())

  @@index([userId])
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  role      String   // 'user' or 'bot'
  content   String
  createdAt DateTime @default(now())

  @@index([userId])
}


enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook{
  POSITIVE
  NEUTRAL
  NEGATIVE
}